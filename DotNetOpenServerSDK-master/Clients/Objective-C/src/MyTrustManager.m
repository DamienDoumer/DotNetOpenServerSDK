//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ./com/us/openserver/session/MyTrustManager.java
//

#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "J2ObjC_source.h"
#include "MyTrustManager.h"
#include "java/security/KeyStore.h"
#include "java/security/KeyStoreException.h"
#include "java/security/NoSuchAlgorithmException.h"
#include "java/security/cert/CertificateException.h"
#include "java/security/cert/X509Certificate.h"
#include "javax/net/ssl/TrustManager.h"
#include "javax/net/ssl/TrustManagerFactory.h"
#include "javax/net/ssl/X509TrustManager.h"

@interface ComUsOpenserverSessionMyTrustManager () {
 @public
  id<JavaxNetSslX509TrustManager> standardTrustManager_;
}

@end

J2OBJC_FIELD_SETTER(ComUsOpenserverSessionMyTrustManager, standardTrustManager_, id<JavaxNetSslX509TrustManager>)

@implementation ComUsOpenserverSessionMyTrustManager

- (instancetype)initWithJavaSecurityKeyStore:(JavaSecurityKeyStore *)keystore {
  ComUsOpenserverSessionMyTrustManager_initWithJavaSecurityKeyStore_(self, keystore);
  return self;
}

- (void)checkClientTrustedWithJavaSecurityCertX509CertificateArray:(IOSObjectArray *)certificates
                                                      withNSString:(NSString *)authType {
  [((id<JavaxNetSslX509TrustManager>) nil_chk(standardTrustManager_)) checkClientTrustedWithJavaSecurityCertX509CertificateArray:certificates withNSString:authType];
}

- (void)checkServerTrustedWithJavaSecurityCertX509CertificateArray:(IOSObjectArray *)certificates
                                                      withNSString:(NSString *)authType {
  if ((certificates != nil) && (certificates->size_ == 1)) [((JavaSecurityCertX509Certificate *) nil_chk(IOSObjectArray_Get(certificates, 0))) checkValidity];
  else [((id<JavaxNetSslX509TrustManager>) nil_chk(standardTrustManager_)) checkServerTrustedWithJavaSecurityCertX509CertificateArray:certificates withNSString:authType];
}

- (IOSObjectArray *)getAcceptedIssuers {
  return [((id<JavaxNetSslX509TrustManager>) nil_chk(self->standardTrustManager_)) getAcceptedIssuers];
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithJavaSecurityKeyStore:", "MyTrustManager", NULL, 0x1, "Ljava.security.NoSuchAlgorithmException;Ljava.security.KeyStoreException;", NULL },
    { "checkClientTrustedWithJavaSecurityCertX509CertificateArray:withNSString:", "checkClientTrusted", "V", 0x1, "Ljava.security.cert.CertificateException;", NULL },
    { "checkServerTrustedWithJavaSecurityCertX509CertificateArray:withNSString:", "checkServerTrusted", "V", 0x1, "Ljava.security.cert.CertificateException;", NULL },
    { "getAcceptedIssuers", NULL, "[Ljava.security.cert.X509Certificate;", 0x1, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "standardTrustManager_", NULL, 0x2, "Ljavax.net.ssl.X509TrustManager;", NULL, NULL, .constantValue.asLong = 0 },
  };
  static const J2ObjcClassInfo _ComUsOpenserverSessionMyTrustManager = { 2, "MyTrustManager", "com.us.openserver.session", NULL, 0x1, 4, methods, 1, fields, 0, NULL, 0, NULL, NULL, NULL };
  return &_ComUsOpenserverSessionMyTrustManager;
}

@end

void ComUsOpenserverSessionMyTrustManager_initWithJavaSecurityKeyStore_(ComUsOpenserverSessionMyTrustManager *self, JavaSecurityKeyStore *keystore) {
  NSObject_init(self);
  self->standardTrustManager_ = nil;
  JavaxNetSslTrustManagerFactory *factory = JavaxNetSslTrustManagerFactory_getInstanceWithNSString_(JavaxNetSslTrustManagerFactory_getDefaultAlgorithm());
  [((JavaxNetSslTrustManagerFactory *) nil_chk(factory)) init__WithJavaSecurityKeyStore:keystore];
  IOSObjectArray *trustManagers = [factory getTrustManagers];
  if (((IOSObjectArray *) nil_chk(trustManagers))->size_ == 0) @throw new_JavaSecurityNoSuchAlgorithmException_initWithNSString_(@"Default trust manager algorithm not found.");
  self->standardTrustManager_ = (id<JavaxNetSslX509TrustManager>) cast_check(IOSObjectArray_Get(trustManagers, 0), JavaxNetSslX509TrustManager_class_());
}

ComUsOpenserverSessionMyTrustManager *new_ComUsOpenserverSessionMyTrustManager_initWithJavaSecurityKeyStore_(JavaSecurityKeyStore *keystore) {
  ComUsOpenserverSessionMyTrustManager *self = [ComUsOpenserverSessionMyTrustManager alloc];
  ComUsOpenserverSessionMyTrustManager_initWithJavaSecurityKeyStore_(self, keystore);
  return self;
}

ComUsOpenserverSessionMyTrustManager *create_ComUsOpenserverSessionMyTrustManager_initWithJavaSecurityKeyStore_(JavaSecurityKeyStore *keystore) {
  return new_ComUsOpenserverSessionMyTrustManager_initWithJavaSecurityKeyStore_(keystore);
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ComUsOpenserverSessionMyTrustManager)
