//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ./com/us/openserver/session/SessionCloser.java
//

#include "J2ObjC_source.h"
#include "Session.h"
#include "SessionCloser.h"
#include "java/lang/Exception.h"
#include "java/lang/Thread.h"

@interface ComUsOpenserverSessionSessionCloser () {
 @public
  ComUsOpenserverSessionSession *session_;
  jint protocolId_;
}

@end

J2OBJC_FIELD_SETTER(ComUsOpenserverSessionSessionCloser, session_, ComUsOpenserverSessionSession *)

inline jint ComUsOpenserverSessionSessionCloser_get_id();
inline jint ComUsOpenserverSessionSessionCloser_set_id(jint value);
inline jint *ComUsOpenserverSessionSessionCloser_getRef_id();
static jint ComUsOpenserverSessionSessionCloser_id;
J2OBJC_STATIC_FIELD_PRIMITIVE(ComUsOpenserverSessionSessionCloser, id, jint)

@implementation ComUsOpenserverSessionSessionCloser

- (instancetype)initWithComUsOpenserverSessionSession:(ComUsOpenserverSessionSession *)session {
  ComUsOpenserverSessionSessionCloser_initWithComUsOpenserverSessionSession_(self, session);
  return self;
}

- (void)close {
  [self closeWithInt:0];
}

- (void)closeWithInt:(jint)protocolId {
  @try {
    if (protocolId > 0) [((ComUsOpenserverSessionSession *) nil_chk(session_)) closeWithInt:protocolId];
    else [((ComUsOpenserverSessionSession *) nil_chk(session_)) close];
  }
  @catch (JavaLangException *ex) {
  }
}

- (void)closeBackgroundThread {
  [self closeBackgroundThreadWithInt:0];
}

- (void)closeBackgroundThreadWithInt:(jint)protocolId {
  self->protocolId_ = protocolId;
  JavaLangThread *t = new_JavaLangThread_initWithJavaLangRunnable_withNSString_(self, JreStrcat("$I", @"SessionCloser", ++ComUsOpenserverSessionSessionCloser_id));
  [t start];
}

- (void)run {
  [self closeWithInt:protocolId_];
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithComUsOpenserverSessionSession:", "SessionCloser", NULL, 0x1, NULL, NULL },
    { "close", NULL, "V", 0x1, NULL, NULL },
    { "closeWithInt:", "close", "V", 0x1, NULL, NULL },
    { "closeBackgroundThread", NULL, "V", 0x1, NULL, NULL },
    { "closeBackgroundThreadWithInt:", "closeBackgroundThread", "V", 0x1, NULL, NULL },
    { "run", NULL, "V", 0x1, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "session_", NULL, 0x2, "Lcom.us.openserver.session.Session;", NULL, NULL, .constantValue.asLong = 0 },
    { "protocolId_", NULL, 0x2, "I", NULL, NULL, .constantValue.asLong = 0 },
    { "id", "id", 0xa, "I", &ComUsOpenserverSessionSessionCloser_id, NULL, .constantValue.asLong = 0 },
  };
  static const J2ObjcClassInfo _ComUsOpenserverSessionSessionCloser = { 2, "SessionCloser", "com.us.openserver.session", NULL, 0x1, 6, methods, 3, fields, 0, NULL, 0, NULL, NULL, NULL };
  return &_ComUsOpenserverSessionSessionCloser;
}

@end

void ComUsOpenserverSessionSessionCloser_initWithComUsOpenserverSessionSession_(ComUsOpenserverSessionSessionCloser *self, ComUsOpenserverSessionSession *session) {
  NSObject_init(self);
  self->session_ = session;
}

ComUsOpenserverSessionSessionCloser *new_ComUsOpenserverSessionSessionCloser_initWithComUsOpenserverSessionSession_(ComUsOpenserverSessionSession *session) {
  ComUsOpenserverSessionSessionCloser *self = [ComUsOpenserverSessionSessionCloser alloc];
  ComUsOpenserverSessionSessionCloser_initWithComUsOpenserverSessionSession_(self, session);
  return self;
}

ComUsOpenserverSessionSessionCloser *create_ComUsOpenserverSessionSessionCloser_initWithComUsOpenserverSessionSession_(ComUsOpenserverSessionSession *session) {
  return new_ComUsOpenserverSessionSessionCloser_initWithComUsOpenserverSessionSession_(session);
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ComUsOpenserverSessionSessionCloser)
