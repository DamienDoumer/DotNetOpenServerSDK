<?xml version="1.0" encoding="utf-8"?>
<topic id="CreatingProtocols.CSharp" revisionNumber="1">
  <developerConceptualDocument
    xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5"
    xmlns:xlink="http://www.w3.org/1999/xlink">

    <introduction>
      <para>
        In this tutorial we will show you how to implement an application layer
        protocol in C# that can be used by both standard Windows applications as well as
        Windows Mobile applications.
      </para>
    </introduction>

    <section address="Solution">
      <title>Use Visual Studio 2013 to Create the Projects</title>
      <content>
        <procedure>
          <title></title>
          <steps class="ordered">
            <step>
              <content>
                <para>
                  Create a new solution, then add three projects:
                </para>
                <table>
                  <tableHeader>
                    <row>
                      <entry>
                        <para>Name</para>
                      </entry>
                      <entry>
                        <para>Project Type</para>
                      </entry>
                      <entry>
                        <para>Description</para>
                      </entry>
                    </row>
                  </tableHeader>
                  <row>
                    <entry>
                      <para>HelloProtocolShared</para>
                    </entry>
                    <entry>
                      <para>Class Library (Portable)</para>
                    </entry>
                    <entry>
                      <para>Contains common code used by both the client and server assemblies.</para>
                    </entry>
                  </row>
                  <row>
                    <entry>
                      <para>HelloProtocolServer</para>
                    </entry>
                    <entry>
                      <para>Class Library</para>
                    </entry>
                    <entry>
                      <para>Contains the server-side protocol implementation.</para>
                    </entry>
                  </row>
                  <row>
                    <entry>
                      <para>HelloProtocolClient</para>
                    </entry>
                    <entry>
                      <para>Class Library (Portable)</para>
                    </entry>
                    <entry>
                      <para>Contains the client-side protocol implementation.</para>
                    </entry>
                  </row>
                </table>
                <alert>
                  <para>
                    When creating the Portable Class Libraries, set the Targets to:
                  </para>
                  <list class="bullet">
                    <listItem>
                      <para>.NET Framework 4.5.2</para>
                    </listItem>
                    <listItem>
                      <para>Windows 8.1</para>
                    </listItem>
                    <listItem>
                      <para>Windows Phone 8.1</para>
                    </listItem>
                  </list>
                </alert>
              </content>
            </step>
            
            <step>
              <content>
                <para>
                  Once you have created the projects, add a reference to the HelloProtocolShared
                  project from both the HelloProtocolServer and HelloProtocolClient projects.
                </para>
              
                <para>
                  From the <legacyBold>Solution Explorer</legacyBold>, expand the
                  <legacyBold>HelloProtocolServer</legacyBold> project, right click on
                  <legacyBold>References</legacyBold> then select <legacyBold>Add
                  Reference</legacyBold>.
                </para>
              
                <para>
                  From the <legacyBold>Reference Manager</legacyBold> form, select
                  <legacyBold>Solution</legacyBold>, check the
                  <legacyBold>HelloProtocolShared</legacyBold> project then click
                  <legacyBold>OK</legacyBold>.
                </para>
                
                <para>
                  From the <legacyBold>Solution Explorer</legacyBold>, expand the
                  <legacyBold>HelloProtocolClient</legacyBold> project, right click on
                  <legacyBold>References</legacyBold> then select <legacyBold>Add
                  Reference</legacyBold>.
                </para>
              
                <para>
                  From the <legacyBold>Reference Manager</legacyBold> form, select
                  <legacyBold>Solution</legacyBold>, check the
                  <legacyBold>HelloProtocolShared</legacyBold> project then click
                  <legacyBold>OK</legacyBold>.
                </para>
              </content>
            </step>
          </steps>
        </procedure>
      </content>
    </section>

    <section address="References">
      <title>Use NuGet to Reference the DotNetOpenServer Assemblies</title>
      <content>
        <procedure>
          <title></title>
          <steps class="ordered">
            <step>
              <content>
                <para>
                  Select <legacyBold>Tools > NuGet Package Manager > Package Manager Console</legacyBold>.
                  From the <legacyBold>Package Manager Console</legacyBold>,
                  set the <legacyBold>Package Source</legacyBold> to <legacyBold>nuget.org</legacyBold>.
                </para>
              </content>
            </step>
            <step>
              <content>
                <para>
                  Set the <legacyBold>Default project</legacyBold> to
                  <legacyBold>HelloProtocolShared</legacyBold> then from the command-line type:
                </para>
                <code>
                  PM> Install-Package UpperSetting.OpenServer.Shared
                </code>
              </content>
            </step>
            
            <step>
              <content>
                <para>
                  Set the <legacyBold> Default project</legacyBold> to
                  <legacyBold>HelloProtocolServer</legacyBold> then from the command-line type:
                </para>
                <code>
                  PM> Install-Package UpperSetting.OpenServer.Shared
                  PM> Install-Package UpperSetting.OpenServer.Windows.Shared
                </code>
              </content>
            </step>
            
            <step>
              <content>
                <para>
                  Set the <legacyBold> Default project</legacyBold> to
                  <legacyBold>HelloProtocolClient</legacyBold> then from the command-line type:
                </para>
                <code>
                  PM> Install-Package UpperSetting.OpenServer.Shared
                </code>
              </content>
            </step>
          </steps>
        </procedure>
      </content>
    </section>
                    
    <section address="Code">
      <title>Implement the Protocol Classes</title>
      <content>
        <procedure>
          <title></title>
          <steps class="ordered">
            <step>
              <content>
                <para>
                  From the HelloProtocolShared project rename the Class1.cs file to
                  HelloProtocol.cs then replace the code with the following code:
                </para>
                <codeReference>HelloProtocol#Shared</codeReference>
              </content>
            </step>

            <step>
              <content>
                <para>
                  Next implement the server and client protocol layers. This is accomplished by
                  creating a class that is derived from
                  <codeEntityReference>T:US.OpenServer.Protocols.ProtocolBase</codeEntityReference>.
                </para>
                <para>
                  Use the
                  <codeEntityReference>M:US.OpenServer.Protocols.ProtocolBase.Initialize(US.OpenServer.SessionBase,US.OpenServer.Protocols.ProtocolConfiguration,System.Object)</codeEntityReference>
                  function to initialize the protocol. The Keep-Alive protocol, for example,
                  creates a Timer that kicks off <legacyBold>Keep-Alive</legacyBold> command
                  packets.
                </para>
                <para>
                  Use the
                  <codeEntityReference>M:US.OpenServer.Protocols.ProtocolBase.OnPacketReceived(System.IO.BinaryReader)</codeEntityReference>
                  function to read command packets. On the server this is typically command
                  packets while on the client this is typically response packets, however; either
                  end can receive command packets.
                </para>
                <para>
                  Use the
                  <codeEntityReference>M:US.OpenServer.Protocols.ProtocolBase.Close</codeEntityReference>
                  function to release associated resources. The
                  <codeEntityReference>T:US.OpenServer.Protocols.KeepAlive.KeepAliveProtocol</codeEntityReference>,
                  for example, sends a
                  <codeEntityReference>F:US.OpenServer.Protocols.KeepAlive.KeepAliveProtocolCommands.QUIT</codeEntityReference>
                  command packet enabling the listening side to cleanly shutdown the connection.
                </para>
                <para>
                  Use the
                  <codeEntityReference>M:US.OpenServer.Protocols.ProtocolBase.Dispose</codeEntityReference>
                  function to immediately release associated resources without allowing for
                  command packets to be transmitted.
                </para>
                <para>
                  From the HelloProtocolServer project rename the Class1.cs file to HelloProtocolServer.cs then replace the code with the following code:
                </para>
                <codeReference>HelloProtocol#Server</codeReference>
              </content>
            </step>
            <step>
              <content>
                <para>
                  From the HelloProtocolClient project rename the Class1.cs file to HelloProtocolClient.cs then replace the code with the following code:
                </para>
                <codeReference>HelloProtocol#Client</codeReference>
              </content>
            </step>
            <step>
              <content>
                <para>
                  Finally, build the solution.
                </para>
              </content>
            </step>
          </steps>
        </procedure>
      </content>
    </section>

    <section address="NextSteps">
      <title>Next Steps</title>
      <content>
        <para>
          Once you have created your protocol components, the next step is to integrate
          your protocol into your <link xlink:href="ServerSideComponents" /> and <link
          xlink:href="ClientSideComponents" />.
        </para>
      </content>
    </section>

    <relatedTopics>
      <link xlink:href="CreatingProtocols" />
      <link xlink:href="ServerSideComponents" />
      <link xlink:href="ClientSideComponents" />
      <codeEntityReference>T:US.OpenServer.Protocols.ProtocolBase</codeEntityReference>
    </relatedTopics>
  </developerConceptualDocument>
</topic>