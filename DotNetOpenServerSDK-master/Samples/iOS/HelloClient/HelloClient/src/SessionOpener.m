//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ./com/us/openserver/session/SessionOpener.java
//

#include "Client.h"
#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "J2ObjC_source.h"
#include "Level.h"
#include "MyTrustManager.h"
#include "ServerConfiguration.h"
#include "Session.h"
#include "SessionOpener.h"
#include "TlsConfiguration.h"
#include "java/lang/Exception.h"
#include "java/lang/Integer.h"
#include "java/lang/Thread.h"
#include "java/net/InetAddress.h"
#include "java/net/InetSocketAddress.h"
#include "java/net/Socket.h"
#include "java/net/SocketException.h"
#include "javax/net/ssl/SSLContext.h"
#include "javax/net/ssl/SSLSocket.h"
#include "javax/net/ssl/SSLSocketFactory.h"
#include "javax/net/ssl/TrustManager.h"

@interface ComUsOpenserverSessionSessionOpener () {
 @public
  ComUsOpenserverClient *client_;
  ComUsOpenserverSessionSession *session_;
  JavaLangException *exception_;
}

- (void)setSocketOptionsWithJavaNetSocket:(JavaNetSocket *)socket;

@end

J2OBJC_FIELD_SETTER(ComUsOpenserverSessionSessionOpener, client_, ComUsOpenserverClient *)
J2OBJC_FIELD_SETTER(ComUsOpenserverSessionSessionOpener, session_, ComUsOpenserverSessionSession *)
J2OBJC_FIELD_SETTER(ComUsOpenserverSessionSessionOpener, exception_, JavaLangException *)

inline jint ComUsOpenserverSessionSessionOpener_get_id();
inline jint ComUsOpenserverSessionSessionOpener_set_id(jint value);
inline jint *ComUsOpenserverSessionSessionOpener_getRef_id();
static jint ComUsOpenserverSessionSessionOpener_id;
J2OBJC_STATIC_FIELD_PRIMITIVE(ComUsOpenserverSessionSessionOpener, id, jint)

__attribute__((unused)) static void ComUsOpenserverSessionSessionOpener_setSocketOptionsWithJavaNetSocket_(ComUsOpenserverSessionSessionOpener *self, JavaNetSocket *socket);

@implementation ComUsOpenserverSessionSessionOpener

- (instancetype)initWithComUsOpenserverClient:(ComUsOpenserverClient *)client {
  ComUsOpenserverSessionSessionOpener_initWithComUsOpenserverClient_(self, client);
  return self;
}

- (ComUsOpenserverSessionSession *)connectBackgroundThread {
  @synchronized(self) {
    JavaLangThread *t = new_JavaLangThread_initWithJavaLangRunnable_withNSString_(self, JreStrcat("$I", @"SessionOpenThread", ++ComUsOpenserverSessionSessionOpener_id));
    [t start];
    [self waitWithLong:[((ComUsOpenserverConfigurationServerConfiguration *) nil_chk([((ComUsOpenserverClient *) nil_chk(client_)) getServerConfiguration])) getSocketTimeoutInTicks]];
  }
  if (exception_ != nil) @throw exception_;
  return session_;
}

- (void)run {
  @synchronized(self) {
    @try {
      (void) [self connect];
    }
    @catch (JavaLangException *ex) {
      exception_ = ex;
    }
    [self notifyAll];
  }
}

- (ComUsOpenserverSessionSession *)connect {
  JavaNetSocket *socket;
  ComUsOpenserverConfigurationServerConfiguration *cfg = [((ComUsOpenserverClient *) nil_chk(client_)) getServerConfiguration];
  ComUsOpenserverConfigurationTlsConfiguration *tls = [((ComUsOpenserverConfigurationServerConfiguration *) nil_chk(cfg)) getTlsConfiguration];
  if (![((ComUsOpenserverConfigurationTlsConfiguration *) nil_chk(tls)) isEnabled]) {
    socket = new_JavaNetSocket_init();
    [socket connectWithJavaNetSocketAddress:new_JavaNetInetSocketAddress_initWithNSString_withInt_([cfg getHost], [cfg getPort]) withInt:3000];
    ComUsOpenserverSessionSessionOpener_setSocketOptionsWithJavaNetSocket_(self, socket);
  }
  else {
    JavaxNetSslSSLContext *sslContext = JavaxNetSslSSLContext_getInstanceWithNSString_(@"TLS");
    [((JavaxNetSslSSLContext *) nil_chk(sslContext)) init__WithJavaxNetSslKeyManagerArray:nil withJavaxNetSslTrustManagerArray:[IOSObjectArray newArrayWithObjects:(id[]){ new_ComUsOpenserverSessionMyTrustManager_initWithJavaSecurityKeyStore_(nil) } count:1 type:JavaxNetSslTrustManager_class_()] withJavaSecuritySecureRandom:nil];
    JavaxNetSslSSLSocketFactory *socketFactory = [sslContext getSocketFactory];
    socket = [((JavaxNetSslSSLSocketFactory *) nil_chk(socketFactory)) createSocketWithNSString:[cfg getHost] withInt:[cfg getPort]];
    ComUsOpenserverSessionSessionOpener_setSocketOptionsWithJavaNetSocket_(self, socket);
    [((JavaxNetSslSSLSocket *) nil_chk(((JavaxNetSslSSLSocket *) cast_chk(socket, [JavaxNetSslSSLSocket class])))) setUseClientModeWithBoolean:true];
  }
  session_ = new_ComUsOpenserverSessionSession_initWithComUsOpenserverClient_withJavaNetSocket_withNSString_(client_, socket, [((JavaNetInetAddress *) nil_chk([((JavaNetSocket *) nil_chk(socket)) getInetAddress])) getHostAddress]);
  [session_ logWithComUsOpenserverLevel:JreLoadEnum(ComUsOpenserverLevel, Info) withNSString:NSString_formatWithNSString_withNSObjectArray_(@"Connected to %s:%d...", [IOSObjectArray newArrayWithObjects:(id[]){ [cfg getHost], JavaLangInteger_valueOfWithInt_([cfg getPort]) } count:2 type:NSObject_class_()])];
  [session_ beginRead];
  return session_;
}

- (void)setSocketOptionsWithJavaNetSocket:(JavaNetSocket *)socket {
  ComUsOpenserverSessionSessionOpener_setSocketOptionsWithJavaNetSocket_(self, socket);
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithComUsOpenserverClient:", "SessionOpener", NULL, 0x1, NULL, NULL },
    { "connectBackgroundThread", NULL, "Lcom.us.openserver.session.Session;", 0x1, "Ljava.lang.Exception;", NULL },
    { "run", NULL, "V", 0x1, NULL, NULL },
    { "connect", NULL, "Lcom.us.openserver.session.Session;", 0x1, "Ljava.lang.Exception;", NULL },
    { "setSocketOptionsWithJavaNetSocket:", "setSocketOptions", "V", 0x2, "Ljava.net.SocketException;", NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "client_", NULL, 0x2, "Lcom.us.openserver.Client;", NULL, NULL, .constantValue.asLong = 0 },
    { "session_", NULL, 0x2, "Lcom.us.openserver.session.Session;", NULL, NULL, .constantValue.asLong = 0 },
    { "exception_", NULL, 0x2, "Ljava.lang.Exception;", NULL, NULL, .constantValue.asLong = 0 },
    { "id", "id", 0xa, "I", &ComUsOpenserverSessionSessionOpener_id, NULL, .constantValue.asLong = 0 },
  };
  static const J2ObjcClassInfo _ComUsOpenserverSessionSessionOpener = { 2, "SessionOpener", "com.us.openserver.session", NULL, 0x1, 5, methods, 4, fields, 0, NULL, 0, NULL, NULL, NULL };
  return &_ComUsOpenserverSessionSessionOpener;
}

@end

void ComUsOpenserverSessionSessionOpener_initWithComUsOpenserverClient_(ComUsOpenserverSessionSessionOpener *self, ComUsOpenserverClient *client) {
  NSObject_init(self);
  self->client_ = client;
}

ComUsOpenserverSessionSessionOpener *new_ComUsOpenserverSessionSessionOpener_initWithComUsOpenserverClient_(ComUsOpenserverClient *client) {
  ComUsOpenserverSessionSessionOpener *self = [ComUsOpenserverSessionSessionOpener alloc];
  ComUsOpenserverSessionSessionOpener_initWithComUsOpenserverClient_(self, client);
  return self;
}

ComUsOpenserverSessionSessionOpener *create_ComUsOpenserverSessionSessionOpener_initWithComUsOpenserverClient_(ComUsOpenserverClient *client) {
  return new_ComUsOpenserverSessionSessionOpener_initWithComUsOpenserverClient_(client);
}

void ComUsOpenserverSessionSessionOpener_setSocketOptionsWithJavaNetSocket_(ComUsOpenserverSessionSessionOpener *self, JavaNetSocket *socket) {
  [((JavaNetSocket *) nil_chk(socket)) setSoTimeoutWithInt:[((ComUsOpenserverConfigurationServerConfiguration *) nil_chk([((ComUsOpenserverClient *) nil_chk(self->client_)) getServerConfiguration])) getSocketTimeoutInTicks]];
  [socket setSoLingerWithBoolean:true withInt:10];
  [socket setTcpNoDelayWithBoolean:true];
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ComUsOpenserverSessionSessionOpener)
