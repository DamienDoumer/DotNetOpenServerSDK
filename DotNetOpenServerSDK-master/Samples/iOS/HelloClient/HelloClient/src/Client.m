//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ./com/us/openserver/Client.java
//

#include "Client.h"
#include "ConsoleLogger.h"
#include "IClientObserver.h"
#include "IOSClass.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "Logger.h"
#include "ProtocolBase.h"
#include "ServerConfiguration.h"
#include "Session.h"
#include "SessionCloser.h"
#include "SessionOpener.h"
#include "java/lang/Exception.h"
#include "java/util/HashMap.h"

@interface ComUsOpenserverClient () {
 @public
  id<ComUsOpenserverIClientObserver> clientObserver_;
  ComUsOpenserverLogger *logger_;
  JavaUtilHashMap *protocolConfigurations_;
  ComUsOpenserverConfigurationServerConfiguration *serverConfiguration_;
  id userData_;
  ComUsOpenserverSessionSession *session_;
}

@end

J2OBJC_FIELD_SETTER(ComUsOpenserverClient, clientObserver_, id<ComUsOpenserverIClientObserver>)
J2OBJC_FIELD_SETTER(ComUsOpenserverClient, logger_, ComUsOpenserverLogger *)
J2OBJC_FIELD_SETTER(ComUsOpenserverClient, protocolConfigurations_, JavaUtilHashMap *)
J2OBJC_FIELD_SETTER(ComUsOpenserverClient, serverConfiguration_, ComUsOpenserverConfigurationServerConfiguration *)
J2OBJC_FIELD_SETTER(ComUsOpenserverClient, userData_, id)
J2OBJC_FIELD_SETTER(ComUsOpenserverClient, session_, ComUsOpenserverSessionSession *)

@implementation ComUsOpenserverClient

- (ComUsOpenserverLogger *)getLogger {
  return logger_;
}

- (JavaUtilHashMap *)getProtocolConfigurations {
  return protocolConfigurations_;
}

- (ComUsOpenserverConfigurationServerConfiguration *)getServerConfiguration {
  return serverConfiguration_;
}

- (id)getUserData {
  return userData_;
}

- (ComUsOpenserverSessionSession *)getSession {
  return session_;
}

- (jboolean)getIsConnected {
  @synchronized(self) {
    return session_ != nil;
  }
}

- (instancetype)initWithComUsOpenserverIClientObserver:(id<ComUsOpenserverIClientObserver>)clientObserver
   withComUsOpenserverConfigurationServerConfiguration:(ComUsOpenserverConfigurationServerConfiguration *)serverConfiguration
                                   withJavaUtilHashMap:(JavaUtilHashMap *)protocolConfigurations {
  ComUsOpenserverClient_initWithComUsOpenserverIClientObserver_withComUsOpenserverConfigurationServerConfiguration_withJavaUtilHashMap_(self, clientObserver, serverConfiguration, protocolConfigurations);
  return self;
}

- (instancetype)initWithComUsOpenserverIClientObserver:(id<ComUsOpenserverIClientObserver>)clientObserver
   withComUsOpenserverConfigurationServerConfiguration:(ComUsOpenserverConfigurationServerConfiguration *)serverConfiguration
                                   withJavaUtilHashMap:(JavaUtilHashMap *)protocolConfigurations
                             withComUsOpenserverLogger:(ComUsOpenserverLogger *)logger {
  ComUsOpenserverClient_initWithComUsOpenserverIClientObserver_withComUsOpenserverConfigurationServerConfiguration_withJavaUtilHashMap_withComUsOpenserverLogger_(self, clientObserver, serverConfiguration, protocolConfigurations, logger);
  return self;
}

- (instancetype)initWithComUsOpenserverIClientObserver:(id<ComUsOpenserverIClientObserver>)clientObserver
   withComUsOpenserverConfigurationServerConfiguration:(ComUsOpenserverConfigurationServerConfiguration *)serverConfiguration
                                   withJavaUtilHashMap:(JavaUtilHashMap *)protocolConfigurations
                             withComUsOpenserverLogger:(ComUsOpenserverLogger *)logger
                                                withId:(id)userData {
  ComUsOpenserverClient_initWithComUsOpenserverIClientObserver_withComUsOpenserverConfigurationServerConfiguration_withJavaUtilHashMap_withComUsOpenserverLogger_withId_(self, clientObserver, serverConfiguration, protocolConfigurations, logger, userData);
  return self;
}

- (void)connect {
  @synchronized(self) {
    ComUsOpenserverSessionSessionOpener *sessionOpener = new_ComUsOpenserverSessionSessionOpener_initWithComUsOpenserverClient_(self);
    session_ = [sessionOpener connect];
  }
}

- (void)connectBackgroundThread {
  @synchronized(self) {
    ComUsOpenserverSessionSessionOpener *sessionOpener = new_ComUsOpenserverSessionSessionOpener_initWithComUsOpenserverClient_(self);
    session_ = [sessionOpener connectBackgroundThread];
  }
}

- (void)close {
  @synchronized(self) {
    if (session_ != nil) {
      ComUsOpenserverSessionSessionCloser *sessionCloser = new_ComUsOpenserverSessionSessionCloser_initWithComUsOpenserverSessionSession_(session_);
      [sessionCloser close];
      session_ = nil;
    }
  }
}

- (void)closeBackgroundThread {
  @synchronized(self) {
    if (session_ != nil) {
      ComUsOpenserverSessionSessionCloser *sessionCloser = new_ComUsOpenserverSessionSessionCloser_initWithComUsOpenserverSessionSession_(session_);
      [sessionCloser closeBackgroundThread];
      session_ = nil;
    }
  }
}

- (void)closeWithInt:(jint)protocolId {
  @synchronized(self) {
    if (session_ != nil) {
      ComUsOpenserverSessionSessionCloser *sessionCloser = new_ComUsOpenserverSessionSessionCloser_initWithComUsOpenserverSessionSession_(session_);
      [sessionCloser closeWithInt:protocolId];
    }
  }
}

- (void)closeBackgroundThreadWithInt:(jint)protocolId {
  @synchronized(self) {
    if (session_ != nil) {
      ComUsOpenserverSessionSessionCloser *sessionCloser = new_ComUsOpenserverSessionSessionCloser_initWithComUsOpenserverSessionSession_(session_);
      [sessionCloser closeBackgroundThreadWithInt:protocolId];
    }
  }
}

- (IOSIntArray *)getServerSupportedProtocolIds {
  @synchronized(self) {
    if (session_ == nil) return [IOSIntArray newArrayWithLength:0];
    return [((ComUsOpenserverSessionSession *) nil_chk(session_)) getRemoteSupportedProtocolIds];
  }
}

- (ComUsOpenserverProtocolsProtocolBase *)initialize__WithInt:(jint)protocolId {
  @synchronized(self) {
    return session_ != nil ? [session_ initialize__WithInt:protocolId withId:userData_] : nil;
  }
}

- (void)onConnectionLostWithJavaLangException:(JavaLangException *)ex {
  @synchronized(self) {
    session_ = nil;
  }
  if (clientObserver_ != nil) [clientObserver_ onConnectionLostWithJavaLangException:ex];
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "getLogger", NULL, "Lcom.us.openserver.Logger;", 0x1, NULL, NULL },
    { "getProtocolConfigurations", NULL, "Ljava.util.HashMap;", 0x1, NULL, "()Ljava/util/HashMap<Ljava/lang/Integer;Lcom/us/openserver/protocols/ProtocolConfiguration;>;" },
    { "getServerConfiguration", NULL, "Lcom.us.openserver.configuration.ServerConfiguration;", 0x1, NULL, NULL },
    { "getUserData", NULL, "Ljava.lang.Object;", 0x1, NULL, NULL },
    { "getSession", NULL, "Lcom.us.openserver.session.Session;", 0x1, NULL, NULL },
    { "getIsConnected", NULL, "Z", 0x1, NULL, NULL },
    { "initWithComUsOpenserverIClientObserver:withComUsOpenserverConfigurationServerConfiguration:withJavaUtilHashMap:", "Client", NULL, 0x1, NULL, "(Lcom/us/openserver/IClientObserver;Lcom/us/openserver/configuration/ServerConfiguration;Ljava/util/HashMap<Ljava/lang/Integer;Lcom/us/openserver/protocols/ProtocolConfiguration;>;)V" },
    { "initWithComUsOpenserverIClientObserver:withComUsOpenserverConfigurationServerConfiguration:withJavaUtilHashMap:withComUsOpenserverLogger:", "Client", NULL, 0x1, NULL, "(Lcom/us/openserver/IClientObserver;Lcom/us/openserver/configuration/ServerConfiguration;Ljava/util/HashMap<Ljava/lang/Integer;Lcom/us/openserver/protocols/ProtocolConfiguration;>;Lcom/us/openserver/Logger;)V" },
    { "initWithComUsOpenserverIClientObserver:withComUsOpenserverConfigurationServerConfiguration:withJavaUtilHashMap:withComUsOpenserverLogger:withId:", "Client", NULL, 0x1, NULL, "(Lcom/us/openserver/IClientObserver;Lcom/us/openserver/configuration/ServerConfiguration;Ljava/util/HashMap<Ljava/lang/Integer;Lcom/us/openserver/protocols/ProtocolConfiguration;>;Lcom/us/openserver/Logger;Ljava/lang/Object;)V" },
    { "connect", NULL, "V", 0x1, "Ljava.lang.Exception;", NULL },
    { "connectBackgroundThread", NULL, "V", 0x1, "Ljava.lang.Exception;", NULL },
    { "close", NULL, "V", 0x1, NULL, NULL },
    { "closeBackgroundThread", NULL, "V", 0x1, NULL, NULL },
    { "closeWithInt:", "close", "V", 0x1, NULL, NULL },
    { "closeBackgroundThreadWithInt:", "closeBackgroundThread", "V", 0x1, NULL, NULL },
    { "getServerSupportedProtocolIds", NULL, "[I", 0x1, NULL, NULL },
    { "initialize__WithInt:", "initialize", "Lcom.us.openserver.protocols.ProtocolBase;", 0x1, "Ljava.lang.Exception;", NULL },
    { "onConnectionLostWithJavaLangException:", "onConnectionLost", "V", 0x1, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "clientObserver_", NULL, 0x2, "Lcom.us.openserver.IClientObserver;", NULL, NULL, .constantValue.asLong = 0 },
    { "logger_", NULL, 0x2, "Lcom.us.openserver.Logger;", NULL, NULL, .constantValue.asLong = 0 },
    { "protocolConfigurations_", NULL, 0x2, "Ljava.util.HashMap;", NULL, "Ljava/util/HashMap<Ljava/lang/Integer;Lcom/us/openserver/protocols/ProtocolConfiguration;>;", .constantValue.asLong = 0 },
    { "serverConfiguration_", NULL, 0x2, "Lcom.us.openserver.configuration.ServerConfiguration;", NULL, NULL, .constantValue.asLong = 0 },
    { "userData_", NULL, 0x2, "Ljava.lang.Object;", NULL, NULL, .constantValue.asLong = 0 },
    { "session_", NULL, 0x2, "Lcom.us.openserver.session.Session;", NULL, NULL, .constantValue.asLong = 0 },
  };
  static const J2ObjcClassInfo _ComUsOpenserverClient = { 2, "Client", "com.us.openserver", NULL, 0x1, 18, methods, 6, fields, 0, NULL, 0, NULL, NULL, NULL };
  return &_ComUsOpenserverClient;
}

@end

void ComUsOpenserverClient_initWithComUsOpenserverIClientObserver_withComUsOpenserverConfigurationServerConfiguration_withJavaUtilHashMap_(ComUsOpenserverClient *self, id<ComUsOpenserverIClientObserver> clientObserver, ComUsOpenserverConfigurationServerConfiguration *serverConfiguration, JavaUtilHashMap *protocolConfigurations) {
  ComUsOpenserverClient_initWithComUsOpenserverIClientObserver_withComUsOpenserverConfigurationServerConfiguration_withJavaUtilHashMap_withComUsOpenserverLogger_withId_(self, clientObserver, serverConfiguration, protocolConfigurations, nil, nil);
}

ComUsOpenserverClient *new_ComUsOpenserverClient_initWithComUsOpenserverIClientObserver_withComUsOpenserverConfigurationServerConfiguration_withJavaUtilHashMap_(id<ComUsOpenserverIClientObserver> clientObserver, ComUsOpenserverConfigurationServerConfiguration *serverConfiguration, JavaUtilHashMap *protocolConfigurations) {
  ComUsOpenserverClient *self = [ComUsOpenserverClient alloc];
  ComUsOpenserverClient_initWithComUsOpenserverIClientObserver_withComUsOpenserverConfigurationServerConfiguration_withJavaUtilHashMap_(self, clientObserver, serverConfiguration, protocolConfigurations);
  return self;
}

ComUsOpenserverClient *create_ComUsOpenserverClient_initWithComUsOpenserverIClientObserver_withComUsOpenserverConfigurationServerConfiguration_withJavaUtilHashMap_(id<ComUsOpenserverIClientObserver> clientObserver, ComUsOpenserverConfigurationServerConfiguration *serverConfiguration, JavaUtilHashMap *protocolConfigurations) {
  return new_ComUsOpenserverClient_initWithComUsOpenserverIClientObserver_withComUsOpenserverConfigurationServerConfiguration_withJavaUtilHashMap_(clientObserver, serverConfiguration, protocolConfigurations);
}

void ComUsOpenserverClient_initWithComUsOpenserverIClientObserver_withComUsOpenserverConfigurationServerConfiguration_withJavaUtilHashMap_withComUsOpenserverLogger_(ComUsOpenserverClient *self, id<ComUsOpenserverIClientObserver> clientObserver, ComUsOpenserverConfigurationServerConfiguration *serverConfiguration, JavaUtilHashMap *protocolConfigurations, ComUsOpenserverLogger *logger) {
  ComUsOpenserverClient_initWithComUsOpenserverIClientObserver_withComUsOpenserverConfigurationServerConfiguration_withJavaUtilHashMap_withComUsOpenserverLogger_withId_(self, clientObserver, serverConfiguration, protocolConfigurations, logger, nil);
}

ComUsOpenserverClient *new_ComUsOpenserverClient_initWithComUsOpenserverIClientObserver_withComUsOpenserverConfigurationServerConfiguration_withJavaUtilHashMap_withComUsOpenserverLogger_(id<ComUsOpenserverIClientObserver> clientObserver, ComUsOpenserverConfigurationServerConfiguration *serverConfiguration, JavaUtilHashMap *protocolConfigurations, ComUsOpenserverLogger *logger) {
  ComUsOpenserverClient *self = [ComUsOpenserverClient alloc];
  ComUsOpenserverClient_initWithComUsOpenserverIClientObserver_withComUsOpenserverConfigurationServerConfiguration_withJavaUtilHashMap_withComUsOpenserverLogger_(self, clientObserver, serverConfiguration, protocolConfigurations, logger);
  return self;
}

ComUsOpenserverClient *create_ComUsOpenserverClient_initWithComUsOpenserverIClientObserver_withComUsOpenserverConfigurationServerConfiguration_withJavaUtilHashMap_withComUsOpenserverLogger_(id<ComUsOpenserverIClientObserver> clientObserver, ComUsOpenserverConfigurationServerConfiguration *serverConfiguration, JavaUtilHashMap *protocolConfigurations, ComUsOpenserverLogger *logger) {
  return new_ComUsOpenserverClient_initWithComUsOpenserverIClientObserver_withComUsOpenserverConfigurationServerConfiguration_withJavaUtilHashMap_withComUsOpenserverLogger_(clientObserver, serverConfiguration, protocolConfigurations, logger);
}

void ComUsOpenserverClient_initWithComUsOpenserverIClientObserver_withComUsOpenserverConfigurationServerConfiguration_withJavaUtilHashMap_withComUsOpenserverLogger_withId_(ComUsOpenserverClient *self, id<ComUsOpenserverIClientObserver> clientObserver, ComUsOpenserverConfigurationServerConfiguration *serverConfiguration, JavaUtilHashMap *protocolConfigurations, ComUsOpenserverLogger *logger, id userData) {
  NSObject_init(self);
  self->clientObserver_ = clientObserver;
  if (logger == nil) logger = new_ComUsOpenserverConsoleLogger_init();
  self->logger_ = logger;
  if (serverConfiguration == nil) serverConfiguration = new_ComUsOpenserverConfigurationServerConfiguration_init();
  self->serverConfiguration_ = serverConfiguration;
  if (protocolConfigurations == nil) protocolConfigurations = new_JavaUtilHashMap_init();
  self->protocolConfigurations_ = protocolConfigurations;
  self->userData_ = userData;
}

ComUsOpenserverClient *new_ComUsOpenserverClient_initWithComUsOpenserverIClientObserver_withComUsOpenserverConfigurationServerConfiguration_withJavaUtilHashMap_withComUsOpenserverLogger_withId_(id<ComUsOpenserverIClientObserver> clientObserver, ComUsOpenserverConfigurationServerConfiguration *serverConfiguration, JavaUtilHashMap *protocolConfigurations, ComUsOpenserverLogger *logger, id userData) {
  ComUsOpenserverClient *self = [ComUsOpenserverClient alloc];
  ComUsOpenserverClient_initWithComUsOpenserverIClientObserver_withComUsOpenserverConfigurationServerConfiguration_withJavaUtilHashMap_withComUsOpenserverLogger_withId_(self, clientObserver, serverConfiguration, protocolConfigurations, logger, userData);
  return self;
}

ComUsOpenserverClient *create_ComUsOpenserverClient_initWithComUsOpenserverIClientObserver_withComUsOpenserverConfigurationServerConfiguration_withJavaUtilHashMap_withComUsOpenserverLogger_withId_(id<ComUsOpenserverIClientObserver> clientObserver, ComUsOpenserverConfigurationServerConfiguration *serverConfiguration, JavaUtilHashMap *protocolConfigurations, ComUsOpenserverLogger *logger, id userData) {
  return new_ComUsOpenserverClient_initWithComUsOpenserverIClientObserver_withComUsOpenserverConfigurationServerConfiguration_withJavaUtilHashMap_withComUsOpenserverLogger_withId_(clientObserver, serverConfiguration, protocolConfigurations, logger, userData);
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ComUsOpenserverClient)
