//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ./com/us/openserver/session/SessionInitializer.java
//

#include "J2ObjC_header.h"

#pragma push_macro("SessionInitializer_INCLUDE_ALL")
#ifdef SessionInitializer_RESTRICT
#define SessionInitializer_INCLUDE_ALL 0
#else
#define SessionInitializer_INCLUDE_ALL 1
#endif
#undef SessionInitializer_RESTRICT

#if !defined (ComUsOpenserverSessionSessionInitializer_) && (SessionInitializer_INCLUDE_ALL || defined(ComUsOpenserverSessionSessionInitializer_INCLUDE))
#define ComUsOpenserverSessionSessionInitializer_

#define JavaLangRunnable_RESTRICT 1
#define JavaLangRunnable_INCLUDE 1
#include "java/lang/Runnable.h"

@class ComUsOpenserverClient;
@class ComUsOpenserverProtocolsProtocolBase;

@interface ComUsOpenserverSessionSessionInitializer : NSObject < JavaLangRunnable >

#pragma mark Public

- (instancetype)initWithComUsOpenserverClient:(ComUsOpenserverClient *)client
                                      withInt:(jint)protocolId;

- (ComUsOpenserverProtocolsProtocolBase *)initialize__WithInt:(jint)protocolId OBJC_METHOD_FAMILY_NONE;

- (ComUsOpenserverProtocolsProtocolBase *)initializeAsync OBJC_METHOD_FAMILY_NONE;

- (void)run;

@end

J2OBJC_EMPTY_STATIC_INIT(ComUsOpenserverSessionSessionInitializer)

FOUNDATION_EXPORT void ComUsOpenserverSessionSessionInitializer_initWithComUsOpenserverClient_withInt_(ComUsOpenserverSessionSessionInitializer *self, ComUsOpenserverClient *client, jint protocolId);

FOUNDATION_EXPORT ComUsOpenserverSessionSessionInitializer *new_ComUsOpenserverSessionSessionInitializer_initWithComUsOpenserverClient_withInt_(ComUsOpenserverClient *client, jint protocolId) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT ComUsOpenserverSessionSessionInitializer *create_ComUsOpenserverSessionSessionInitializer_initWithComUsOpenserverClient_withInt_(ComUsOpenserverClient *client, jint protocolId);

J2OBJC_TYPE_LITERAL_HEADER(ComUsOpenserverSessionSessionInitializer)

#endif

#pragma pop_macro("SessionInitializer_INCLUDE_ALL")
