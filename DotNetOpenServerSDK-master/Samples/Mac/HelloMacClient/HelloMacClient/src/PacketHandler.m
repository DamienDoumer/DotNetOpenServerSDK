//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ./com/us/openserver/session/PacketHandler.java
//

#include "BinaryReader.h"
#include "J2ObjC_source.h"
#include "PacketHandler.h"
#include "Session.h"
#include "java/lang/Exception.h"
#include "java/lang/Thread.h"

@interface ComUsOpenserverSessionPacketHandler () {
 @public
  ComUsOpenserverSessionSession *session_;
  ComUsOpenserverProtocolsBinaryReader *br_;
  JavaLangException *exception_;
  JavaLangThread *t_;
}

@end

J2OBJC_FIELD_SETTER(ComUsOpenserverSessionPacketHandler, session_, ComUsOpenserverSessionSession *)
J2OBJC_FIELD_SETTER(ComUsOpenserverSessionPacketHandler, br_, ComUsOpenserverProtocolsBinaryReader *)
J2OBJC_FIELD_SETTER(ComUsOpenserverSessionPacketHandler, exception_, JavaLangException *)
J2OBJC_FIELD_SETTER(ComUsOpenserverSessionPacketHandler, t_, JavaLangThread *)

inline jint ComUsOpenserverSessionPacketHandler_get_id();
inline jint ComUsOpenserverSessionPacketHandler_set_id(jint value);
inline jint *ComUsOpenserverSessionPacketHandler_getRef_id();
static jint ComUsOpenserverSessionPacketHandler_id;
J2OBJC_STATIC_FIELD_PRIMITIVE(ComUsOpenserverSessionPacketHandler, id, jint)

@implementation ComUsOpenserverSessionPacketHandler

- (instancetype)initWithComUsOpenserverSessionSession:(ComUsOpenserverSessionSession *)session
             withComUsOpenserverProtocolsBinaryReader:(ComUsOpenserverProtocolsBinaryReader *)br {
  ComUsOpenserverSessionPacketHandler_initWithComUsOpenserverSessionSession_withComUsOpenserverProtocolsBinaryReader_(self, session, br);
  return self;
}

- (void)execute {
  t_ = new_JavaLangThread_initWithJavaLangRunnable_withNSString_(self, JreStrcat("$I", @"PacketHandler", ComUsOpenserverSessionPacketHandler_id++));
  [t_ start];
}

- (void)run {
  @try {
    [((ComUsOpenserverSessionSession *) nil_chk(session_)) onPacketReceivedWithComUsOpenserverProtocolsBinaryReader:br_];
  }
  @catch (JavaLangException *ex) {
    exception_ = ex;
  }
}

- (JavaLangException *)getException {
  return exception_;
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithComUsOpenserverSessionSession:withComUsOpenserverProtocolsBinaryReader:", "PacketHandler", NULL, 0x1, NULL, NULL },
    { "execute", NULL, "V", 0x1, NULL, NULL },
    { "run", NULL, "V", 0x1, NULL, NULL },
    { "getException", NULL, "Ljava.lang.Exception;", 0x1, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "session_", NULL, 0x2, "Lcom.us.openserver.session.Session;", NULL, NULL, .constantValue.asLong = 0 },
    { "br_", NULL, 0x2, "Lcom.us.openserver.protocols.BinaryReader;", NULL, NULL, .constantValue.asLong = 0 },
    { "exception_", NULL, 0x2, "Ljava.lang.Exception;", NULL, NULL, .constantValue.asLong = 0 },
    { "t_", NULL, 0x2, "Ljava.lang.Thread;", NULL, NULL, .constantValue.asLong = 0 },
    { "id", "id", 0xa, "I", &ComUsOpenserverSessionPacketHandler_id, NULL, .constantValue.asLong = 0 },
  };
  static const J2ObjcClassInfo _ComUsOpenserverSessionPacketHandler = { 2, "PacketHandler", "com.us.openserver.session", NULL, 0x1, 4, methods, 5, fields, 0, NULL, 0, NULL, NULL, NULL };
  return &_ComUsOpenserverSessionPacketHandler;
}

@end

void ComUsOpenserverSessionPacketHandler_initWithComUsOpenserverSessionSession_withComUsOpenserverProtocolsBinaryReader_(ComUsOpenserverSessionPacketHandler *self, ComUsOpenserverSessionSession *session, ComUsOpenserverProtocolsBinaryReader *br) {
  NSObject_init(self);
  self->session_ = session;
  self->br_ = br;
}

ComUsOpenserverSessionPacketHandler *new_ComUsOpenserverSessionPacketHandler_initWithComUsOpenserverSessionSession_withComUsOpenserverProtocolsBinaryReader_(ComUsOpenserverSessionSession *session, ComUsOpenserverProtocolsBinaryReader *br) {
  ComUsOpenserverSessionPacketHandler *self = [ComUsOpenserverSessionPacketHandler alloc];
  ComUsOpenserverSessionPacketHandler_initWithComUsOpenserverSessionSession_withComUsOpenserverProtocolsBinaryReader_(self, session, br);
  return self;
}

ComUsOpenserverSessionPacketHandler *create_ComUsOpenserverSessionPacketHandler_initWithComUsOpenserverSessionSession_withComUsOpenserverProtocolsBinaryReader_(ComUsOpenserverSessionSession *session, ComUsOpenserverProtocolsBinaryReader *br) {
  return new_ComUsOpenserverSessionPacketHandler_initWithComUsOpenserverSessionSession_withComUsOpenserverProtocolsBinaryReader_(session, br);
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ComUsOpenserverSessionPacketHandler)
